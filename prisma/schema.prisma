generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  password           String
  name               String?
  company            String
  role               UserRole            @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  properties         Property[]
  verificationTokens VerificationToken[]
  overrideRequests   OverrideRequest[]   @relation("UserOverrideRequests")
  adminReviews       OverrideRequest[]   @relation("AdminOverrideReviews")
}

model Property {
  id            String     @id @default(cuid())
  name          String
  address       String?
  county        String
  state         String
  numberOfUnits Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  ownerId       String
  owner         User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rentRolls     RentRoll[]
  units         Unit[]
}

model Unit {
  id            String   @id @default(cuid())
  unitNumber    String
  squareFootage Int?
  bedroomCount  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leases        Lease[]

  @@unique([propertyId, unitNumber])
}

model RentRoll {
  id         String    @id @default(cuid())
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenancies  Tenancy[]

  @@unique([propertyId, date])
}

model Lease {
  id                  String               @id @default(cuid())
  name                String
  leaseStartDate      DateTime?
  leaseEndDate        DateTime?
  leaseRent           Decimal?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  unitId              String
  unit                Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  tenancy             Tenancy?
  incomeVerifications IncomeVerification[]
  residents           Resident[]

  @@index([unitId])
}

model Tenancy {
  id         String   @id @default(cuid())
  rentRollId String
  rentRoll   RentRoll @relation(fields: [rentRollId], references: [id], onDelete: Cascade)
  leaseId    String   @unique
  lease      Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([leaseId, rentRollId])
  @@index([rentRollId])
}

model Resident {
  id               String           @id @default(cuid())
  name             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  leaseId          String
  verifiedIncome   Float?
  annualizedIncome Float
  incomeDocuments  IncomeDocument[]
  lease            Lease            @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model IncomeVerification {
  id                       String             @id @default(cuid())
  status                   VerificationStatus @default(IN_PROGRESS)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  finalizedAt              DateTime?
  calculatedVerifiedIncome Float?
  leaseId                  String
  associatedLeaseEnd       DateTime?
  associatedLeaseStart     DateTime?
  dueDate                  DateTime
  leaseYear                Int?
  reason                   VerificationReason @default(ANNUAL_RECERTIFICATION)
  reminderSentAt           DateTime?
  verificationPeriodEnd    DateTime
  verificationPeriodStart  DateTime
  incomeDocuments          IncomeDocument[]
  lease                    Lease              @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId])
  @@index([dueDate])
  @@index([status])
}

model IncomeDocument {
  id             String         @id @default(cuid())
  documentType   DocumentType
  documentDate   DateTime
  uploadDate     DateTime       @default(now())
  status         DocumentStatus @default(UPLOADED)
  filePath       String
  box1_wages     Float?
  box3_ss_wages  Float?
  box5_med_wages Float?
  employeeName   String?
  employerName   String?
  taxYear        Int?
  calculatedAnnualizedIncome Float?
  payPeriodStartDate DateTime?
  payPeriodEndDate   DateTime?
  grossPayAmount     Float?
  payFrequency       String?
  verificationId String
  residentId     String
  resident       Resident       @relation(fields: [residentId], references: [id], onDelete: Cascade)
  verification   IncomeVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)

  @@index([verificationId])
  @@index([residentId])
}

enum DocumentType {
  W2
  PAYSTUB
  BANK_STATEMENT
  OFFER_LETTER
  SOCIAL_SECURITY
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  NEEDS_REVIEW
}

enum VerificationStatus {
  IN_PROGRESS
  FINALIZED
  OVERDUE
}

enum VerificationReason {
  INITIAL_LEASE
  ANNUAL_RECERTIFICATION
  LEASE_RENEWAL
  INCOME_CHANGE
  COMPLIANCE_AUDIT
}

enum UserRole {
  USER
  ADMIN
}

enum OverrideRequestType {
  VALIDATION_EXCEPTION    // Need fewer docs than required
  INCOME_DISCREPANCY     // Use verified vs compliance income
  DOCUMENT_REVIEW        // Manual entry for failed OCR
}

enum OverrideRequestStatus {
  PENDING
  APPROVED  
  DENIED
  APPLIED
}

model OverrideRequest {
  id               String                @id @default(cuid())
  type             OverrideRequestType
  status           OverrideRequestStatus @default(PENDING)
  
  // Request details
  userExplanation  String                // User's justification
  adminNotes       String?               // Admin's decision notes
  
  // Context (what needs override)
  unitId           String?
  residentId       String?
  verificationId   String?
  documentId       String?
  
  // Users involved
  requesterId      String                // User who requested
  reviewerId       String?               // Admin who reviewed
  
  // Timestamps
  createdAt        DateTime              @default(now())
  reviewedAt       DateTime?
  appliedAt        DateTime?
  
  // Relations
  requester        User                  @relation("UserOverrideRequests", fields: [requesterId], references: [id])
  reviewer         User?                 @relation("AdminOverrideReviews", fields: [reviewerId], references: [id])
  
  @@index([status])
  @@index([type])
  @@index([requesterId])
}
