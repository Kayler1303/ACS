generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model AdminMessage {
  id                                  String          @id
  subject                             String
  message                             String
  sentAt                              DateTime        @default(now())
  overrideRequestId                   String
  adminId                             String
  recipientId                         String
  User_AdminMessage_adminIdToUser     User            @relation("AdminMessage_adminIdToUser", fields: [adminId], references: [id])
  OverrideRequest                     OverrideRequest @relation(fields: [overrideRequestId], references: [id], onDelete: Cascade)
  User_AdminMessage_recipientIdToUser User            @relation("AdminMessage_recipientIdToUser", fields: [recipientId], references: [id])
}

model IncomeDocument {
  id                         String             @id
  documentType               DocumentType
  documentDate               DateTime
  uploadDate                 DateTime           @default(now())
  status                     DocumentStatus     @default(PROCESSING)
  filePath                   String
  box1_wages                 Decimal?           @db.Decimal(10, 2)
  box3_ss_wages              Decimal?           @db.Decimal(10, 2)
  box5_med_wages             Decimal?           @db.Decimal(10, 2)
  employeeName               String?
  employerName               String?
  taxYear                    Int?
  verificationId             String
  residentId                 String
  grossPayAmount             Decimal?           @db.Decimal(10, 2)
  payFrequency               String?
  payPeriodEndDate           DateTime?
  payPeriodStartDate         DateTime?
  calculatedAnnualizedIncome Decimal?           @db.Decimal(10, 2)
  Resident                   Resident           @relation(fields: [residentId], references: [id], onDelete: Cascade)
  IncomeVerification         IncomeVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
  OverrideRequest            OverrideRequest[]

  @@index([residentId])
  @@index([status])
  @@index([verificationId])
}

model IncomeVerification {
  id                       String              @id
  status                   VerificationStatus  @default(IN_PROGRESS)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime
  finalizedAt              DateTime?
  calculatedVerifiedIncome Decimal?            @db.Decimal(10, 2)
  associatedLeaseEnd       DateTime?
  associatedLeaseStart     DateTime?
  dueDate                  DateTime?
  leaseYear                Int?
  reason                   VerificationReason?
  reminderSentAt           DateTime?
  verificationPeriodEnd    DateTime?
  verificationPeriodStart  DateTime?
  leaseId                  String
  IncomeDocument           IncomeDocument[]
  Lease                    Lease               @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  OverrideRequest          OverrideRequest[]

  @@index([leaseId])
  @@index([status])
}

model Lease {
  id                 String               @id
  name               String
  leaseStartDate     DateTime?
  leaseEndDate       DateTime?
  leaseRent          Decimal?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  unitId             String
  IncomeVerification IncomeVerification[]
  Unit               Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  Resident           Resident[]
  Tenancy            Tenancy?

  @@index([unitId])
}

model OverrideRequest {
  id                                     String                @id
  type                                   OverrideRequestType
  status                                 OverrideRequestStatus @default(PENDING)
  userExplanation                        String?
  adminNotes                             String?
  unitId                                 String?
  residentId                             String?
  verificationId                         String?
  documentId                             String?
  requesterId                            String
  reviewerId                             String?
  createdAt                              DateTime              @default(now())
  reviewedAt                             DateTime?
  updatedAt                              DateTime
  propertyId                             String?
  AdminMessage                           AdminMessage[]
  IncomeDocument                         IncomeDocument?       @relation(fields: [documentId], references: [id])
  Property                               Property?             @relation(fields: [propertyId], references: [id])
  User_OverrideRequest_requesterIdToUser User                  @relation("OverrideRequest_requesterIdToUser", fields: [requesterId], references: [id])
  Resident                               Resident?             @relation(fields: [residentId], references: [id])
  User_OverrideRequest_reviewerIdToUser  User?                 @relation("OverrideRequest_reviewerIdToUser", fields: [reviewerId], references: [id])
  Unit                                   Unit?                 @relation(fields: [unitId], references: [id])
  IncomeVerification                     IncomeVerification?   @relation(fields: [verificationId], references: [id])
}

model Property {
  id                       String                 @id
  name                     String
  address                  String?
  county                   String
  state                    String
  numberOfUnits            Int?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime
  ownerId                  String
  complianceOption         String?                @default("20% at 50% AMI, 55% at 80% AMI")
  includeRentAnalysis      Boolean                @default(false)
  includeUtilityAllowances Boolean                @default(false)
  utilityAllowances        Json?
  placedInServiceDate      DateTime?
  OverrideRequest          OverrideRequest[]
  User                     User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  PropertyShare            PropertyShare[]
  PropertySubscription     PropertySubscription?
  RentRoll                 RentRoll[]
  RentRollSnapshot         RentRollSnapshot[]
  Unit                     Unit[]
  UnitCountDiscrepancy     UnitCountDiscrepancy[]
}

model RentRoll {
  id                   String                 @id
  uploadDate           DateTime               @default(now())
  filename             String?
  propertyId           String
  snapshotId           String?
  Property             Property               @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  snapshot             RentRollSnapshot?      @relation(fields: [snapshotId], references: [id])
  Tenancy              Tenancy[]
  UnitCountDiscrepancy UnitCountDiscrepancy[]

  @@index([propertyId])
  @@index([snapshotId])
}

model Resident {
  id                         String            @id
  name                       String
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime
  verifiedIncome             Decimal?          @db.Decimal(10, 2)
  annualizedIncome           Decimal?          @db.Decimal(10, 2)
  originalRentRollIncome     Decimal?          @db.Decimal(10, 2) // Original income from rent roll upload (never updated)
  leaseId                    String
  calculatedAnnualizedIncome Decimal?          @db.Decimal(10, 2)
  finalizedAt                DateTime?
  hasNoIncome                Boolean           @default(false)
  incomeFinalized            Boolean           @default(false)
  IncomeDocument             IncomeDocument[]
  OverrideRequest            OverrideRequest[]
  Lease                      Lease             @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId])
}

model Tenancy {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  rentRollId String
  leaseId    String   @unique
  Lease      Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  RentRoll   RentRoll @relation(fields: [rentRollId], references: [id], onDelete: Cascade)

  @@unique([leaseId, rentRollId])
  @@index([rentRollId])
}

model Unit {
  id              String            @id
  unitNumber      String
  squareFootage   Int?
  bedroomCount    Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  propertyId      String
  Lease           Lease[]
  OverrideRequest OverrideRequest[]
  Property        Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([unitNumber])
}

model User {
  id                                                String                 @id
  email                                             String                 @unique
  emailVerified                                     DateTime?
  password                                          String
  name                                              String?
  company                                           String
  createdAt                                         DateTime               @default(now())
  updatedAt                                         DateTime
  role                                              UserRole               @default(USER)
  suspended                                         Boolean                @default(false)
  AdminMessage_AdminMessage_adminIdToUser           AdminMessage[]         @relation("AdminMessage_adminIdToUser")
  AdminMessage_AdminMessage_recipientIdToUser       AdminMessage[]         @relation("AdminMessage_recipientIdToUser")
  ManualPayment                                     ManualPayment[]        @relation("ManualPayment_recordedById")
  OverrideRequest_OverrideRequest_requesterIdToUser OverrideRequest[]      @relation("OverrideRequest_requesterIdToUser")
  OverrideRequest_OverrideRequest_reviewerIdToUser  OverrideRequest[]      @relation("OverrideRequest_reviewerIdToUser")
  Property                                          Property[]
  PropertyAdminGrant                                PropertyAdminGrant[]   @relation("PropertyAdminGrant_grantedById")
  PropertyShare_SharedBy                            PropertyShare[]        @relation("PropertyShare_sharedById")
  PropertyShare_SharedWith                          PropertyShare[]        @relation("PropertyShare_userId")
  UnitCountDiscrepancy                              UnitCountDiscrepancy[] @relation("UnitCountDiscrepancy_resolvedById")
  UserActivity                                      UserActivity[]
  VerificationToken                                 VerificationToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  User       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model PropertyShare {
  id         String          @id @default(cuid())
  propertyId String
  userId     String
  sharedById String
  permission PermissionLevel
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  property   Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  sharedBy   User            @relation("PropertyShare_sharedById", fields: [sharedById], references: [id], onDelete: Cascade)
  user       User            @relation("PropertyShare_userId", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
}

model PropertySubscription {
  id                    String                    @id @default(cuid())
  propertyId            String                    @unique
  setupType             SetupType                 @default(PENDING)
  setupFeeAmount        Decimal?                  @db.Decimal(10, 2)
  setupFeePaid          Boolean                   @default(false)
  setupFeeTransactionId String?
  monthlyFeeAmount      Decimal?                  @db.Decimal(10, 2)
  subscriptionStatus    SubscriptionStatus        @default(INACTIVE)
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  isManualPayment       Boolean                   @default(false)
  manualPaymentNotes    String?
  nextPaymentDue        DateTime?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  property              Property                  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  transactions          PaymentTransaction[]
  manualPayments        ManualPayment[]
  adminGrant            PropertyAdminGrant?

  @@index([propertyId])
  @@index([subscriptionStatus])
  @@index([isManualPayment])
}

model PaymentTransaction {
  id                     String               @id @default(cuid())
  propertySubscriptionId String
  stripePaymentIntentId  String?              @unique
  amount                 Decimal              @db.Decimal(10, 2)
  currency               String               @default("usd")
  transactionType        TransactionType
  status                 TransactionStatus    @default(PENDING)
  description            String?
  metadata               Json?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  propertySubscription   PropertySubscription @relation(fields: [propertySubscriptionId], references: [id], onDelete: Cascade)

  @@index([propertySubscriptionId])
  @@index([status])
  @@index([transactionType])
}

model PropertyAdminGrant {
  id                     String               @id @default(cuid())
  propertySubscriptionId String               @unique
  grantedById            String
  reason                 String?
  grantedAt              DateTime             @default(now())
  expiresAt              DateTime?
  isActive               Boolean              @default(true)
  propertySubscription   PropertySubscription @relation(fields: [propertySubscriptionId], references: [id], onDelete: Cascade)
  grantedBy              User                 @relation("PropertyAdminGrant_grantedById", fields: [grantedById], references: [id])

  @@index([propertySubscriptionId])
  @@index([grantedById])
  @@index([isActive])
}

model ManualPayment {
  id                     String               @id @default(cuid())
  propertySubscriptionId String
  paymentMethod          ManualPaymentMethod
  amount                 Decimal              @db.Decimal(10, 2)
  paymentType            ManualPaymentType
  referenceNumber        String?              // Check number, ACH reference, etc.
  notes                  String?
  paidDate               DateTime
  recordedById           String
  recordedAt             DateTime             @default(now())
  periodStart            DateTime?            // For monthly payments
  periodEnd              DateTime?            // For monthly payments
  propertySubscription   PropertySubscription @relation(fields: [propertySubscriptionId], references: [id], onDelete: Cascade)
  recordedBy             User                 @relation("ManualPayment_recordedById", fields: [recordedById], references: [id])

  @@index([propertySubscriptionId])
  @@index([recordedById])
  @@index([paidDate])
}

model UnitCountDiscrepancy {
  id                     String                      @id @default(cuid())
  propertyId             String
  declaredUnitCount      Int                         // What user said during property creation
  actualUnitCount        Int                         // What was found in rent roll
  rentRollId             String?                     // Which rent roll revealed the discrepancy
  discoveredAt           DateTime                    @default(now())
  status                 UnitDiscrepancyStatus       @default(PENDING)
  paymentDifference      Decimal                     @db.Decimal(10, 2) // Amount owed due to discrepancy
  setupType              SetupType                   // Full service or self service
  resolvedAt             DateTime?
  resolvedById           String?
  resolutionNotes        String?
  property               Property                    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rentRoll               RentRoll?                   @relation(fields: [rentRollId], references: [id])
  resolvedBy             User?                       @relation("UnitCountDiscrepancy_resolvedById", fields: [resolvedById], references: [id])

  @@index([propertyId])
  @@index([status])
  @@index([discoveredAt])
}

model RentRollSnapshot {
  id         String     @id
  propertyId String
  uploadDate DateTime   @default(now())
  filename   String?
  isActive   Boolean    @default(true)
  hudIncomeLimits Json?     // Store HUD income limits used at snapshot creation time
  hudDataYear     Int?      // Year of HUD data used
  rentRolls  RentRoll[]
  property   Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([uploadDate])
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  description  String?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  NEEDS_REVIEW
}

enum DocumentType {
  W2
  PAYSTUB
  BANK_STATEMENT
  OFFER_LETTER
  SOCIAL_SECURITY
  SSA_1099
  OTHER
}

enum OverrideRequestStatus {
  PENDING
  APPROVED
  DENIED
  APPLIED
}

enum OverrideRequestType {
  VALIDATION_EXCEPTION
  INCOME_DISCREPANCY
  DOCUMENT_REVIEW
  PROPERTY_DELETION
  DUPLICATE_DOCUMENT
}

enum UserRole {
  USER
  ADMIN
}

enum VerificationReason {
  INITIAL_LEASE
  ANNUAL_RECERTIFICATION
  LEASE_RENEWAL
  INCOME_CHANGE
  COMPLIANCE_AUDIT
}

enum VerificationStatus {
  IN_PROGRESS
  FINALIZED
  OVERDUE
}

enum PermissionLevel {
  READ_ONLY
  CONFIGURE
  EDIT
}

enum ActivityType {
  LOGIN
  LOGOUT
  PAGE_VIEW
  PROPERTY_VIEW
  SNAPSHOT_UPLOAD
  DOCUMENT_UPLOAD
  USER_CREATED
  PROPERTY_CREATED
  ADMIN_ACTION
  ACCOUNT_SUSPENDED
  ACCOUNT_UNSUSPENDED
}

enum SetupType {
  PENDING
  FULL_SERVICE
  SELF_SERVICE
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum TransactionType {
  SETUP_FEE
  MONTHLY_SUBSCRIPTION
  REFUND
  MANUAL_PAYMENT
  MANUAL_SETUP_FEE
}

enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum ManualPaymentMethod {
  ACH
  CHECK
  WIRE_TRANSFER
  CASH
  OTHER
}

enum ManualPaymentType {
  SETUP_FEE
  MONTHLY_PAYMENT
  PARTIAL_PAYMENT
  LATE_FEE
  OTHER
}

enum UnitDiscrepancyStatus {
  PENDING
  RESOLVED
  WAIVED
}

