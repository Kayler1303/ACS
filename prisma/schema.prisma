generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  password           String
  name               String?
  company            String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               UserRole            @default(USER)
  adminMessages      AdminMessage[]      @relation("AdminMessages")
  receivedMessages   AdminMessage[]      @relation("ReceivedMessages")
  overrideRequests   OverrideRequest[]   @relation("UserOverrideRequests")
  adminReviews       OverrideRequest[]   @relation("AdminOverrideReviews")
  properties         Property[]
  verificationTokens VerificationToken[]
}

model Property {
  id                      String            @id @default(cuid())
  name                    String
  address                 String?
  county                  String
  state                   String
  numberOfUnits           Int?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  ownerId                 String
  complianceOption        String?           @default("20% at 50% AMI, 55% at 80% AMI")
  includeRentAnalysis     Boolean           @default(false)
  includeUtilityAllowances Boolean          @default(false)
  utilityAllowances       Json?
  overrideRequests        OverrideRequest[]
  owner                   User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rentRolls               RentRoll[]
  units                   Unit[]
}

model Unit {
  id               String            @id @default(cuid())
  unitNumber       String
  squareFootage    Int?
  bedroomCount     Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  propertyId       String
  leases           Lease[]
  overrideRequests OverrideRequest[]
  property         Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([unitNumber])
}

model RentRoll {
  id         String    @id @default(cuid())
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenancies  Tenancy[]

  @@unique([propertyId, date])
}

model Lease {
  id                  String               @id @default(cuid())
  name                String
  leaseStartDate      DateTime?
  leaseEndDate        DateTime?
  leaseRent           Decimal?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  unitId              String
  incomeVerifications IncomeVerification[]
  unit                Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  residents           Resident[]
  tenancy             Tenancy?

  @@index([unitId])
}

model Tenancy {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rentRollId String
  leaseId    String   @unique
  lease      Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  rentRoll   RentRoll @relation(fields: [rentRollId], references: [id], onDelete: Cascade)

  @@unique([leaseId, rentRollId])
  @@index([rentRollId])
}

model Resident {
  id                         String            @id @default(cuid())
  name                       String
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  verifiedIncome             Decimal?          @db.Decimal(10, 2)
  annualizedIncome           Decimal?          @db.Decimal(10, 2)
  leaseId                    String
  calculatedAnnualizedIncome Decimal?          @db.Decimal(10, 2)
  finalizedAt                DateTime?
  incomeFinalized            Boolean           @default(false)
  hasNoIncome                Boolean           @default(false)
  incomeDocuments            IncomeDocument[]
  overrideRequests           OverrideRequest[]
  lease                      Lease             @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model IncomeVerification {
  id                       String              @id @default(cuid())
  status                   VerificationStatus  @default(IN_PROGRESS)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  finalizedAt              DateTime?
  calculatedVerifiedIncome Decimal?            @db.Decimal(10, 2)
  associatedLeaseEnd       DateTime?
  associatedLeaseStart     DateTime?
  dueDate                  DateTime?
  leaseYear                Int?
  reason                   VerificationReason?
  reminderSentAt           DateTime?
  verificationPeriodEnd    DateTime?
  verificationPeriodStart  DateTime?
  leaseId                  String
  incomeDocuments          IncomeDocument[]
  lease                    Lease               @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  overrideRequests         OverrideRequest[]

  @@index([leaseId])
  @@index([status])
}

model IncomeDocument {
  id                         String             @id @default(cuid())
  documentType               DocumentType
  documentDate               DateTime
  uploadDate                 DateTime           @default(now())
  status                     DocumentStatus     @default(PROCESSING)
  filePath                   String
  box1_wages                 Decimal?           @db.Decimal(10, 2)
  box3_ss_wages              Decimal?           @db.Decimal(10, 2)
  box5_med_wages             Decimal?           @db.Decimal(10, 2)
  employeeName               String?
  employerName               String?
  taxYear                    Int?
  verificationId             String
  residentId                 String
  calculatedAnnualizedIncome Decimal?           @db.Decimal(10, 2)
  grossPayAmount             Decimal?           @db.Decimal(10, 2)
  payFrequency               String?
  payPeriodEndDate           DateTime?
  payPeriodStartDate         DateTime?
  resident                   Resident           @relation(fields: [residentId], references: [id], onDelete: Cascade)
  verification               IncomeVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
  overrideRequests           OverrideRequest[]

  @@index([verificationId])
  @@index([residentId])
  @@index([status])
}

model OverrideRequest {
  id              String                @id @default(cuid())
  type            OverrideRequestType
  status          OverrideRequestStatus @default(PENDING)
  userExplanation String?
  adminNotes      String?
  unitId          String?
  residentId      String?
  verificationId  String?
  documentId      String?
  requesterId     String
  reviewerId      String?
  createdAt       DateTime              @default(now())
  reviewedAt      DateTime?
  updatedAt       DateTime              @updatedAt
  propertyId      String?
  adminMessages   AdminMessage[]
  document        IncomeDocument?       @relation(fields: [documentId], references: [id])
  property        Property?             @relation(fields: [propertyId], references: [id])
  requester       User                  @relation("UserOverrideRequests", fields: [requesterId], references: [id])
  resident        Resident?             @relation(fields: [residentId], references: [id])
  reviewer        User?                 @relation("AdminOverrideReviews", fields: [reviewerId], references: [id])
  unit            Unit?                 @relation(fields: [unitId], references: [id])
  verification    IncomeVerification?   @relation(fields: [verificationId], references: [id])
}

model AdminMessage {
  id                String          @id @default(cuid())
  subject           String
  message           String
  sentAt            DateTime        @default(now())
  overrideRequestId String
  adminId           String
  recipientId       String
  admin             User            @relation("AdminMessages", fields: [adminId], references: [id])
  overrideRequest   OverrideRequest @relation(fields: [overrideRequestId], references: [id], onDelete: Cascade)
  recipient         User            @relation("ReceivedMessages", fields: [recipientId], references: [id])
}

enum DocumentType {
  W2
  PAYSTUB
  BANK_STATEMENT
  OFFER_LETTER
  SOCIAL_SECURITY
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  NEEDS_REVIEW
}

enum VerificationStatus {
  IN_PROGRESS
  FINALIZED
  OVERDUE
}

enum VerificationReason {
  INITIAL_LEASE
  ANNUAL_RECERTIFICATION
  LEASE_RENEWAL
  INCOME_CHANGE
  COMPLIANCE_AUDIT
}

enum UserRole {
  USER
  ADMIN
}

enum OverrideRequestType {
  VALIDATION_EXCEPTION
  INCOME_DISCREPANCY
  DOCUMENT_REVIEW
  PROPERTY_DELETION
}

enum OverrideRequestStatus {
  PENDING
  APPROVED
  DENIED
  APPLIED
}
