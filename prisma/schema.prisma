generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  password           String
  name               String?
  company            String
  role               UserRole            @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  properties         Property[]
  verificationTokens VerificationToken[]
  overrideRequests   OverrideRequest[]   @relation("UserOverrideRequests")
  adminReviews       OverrideRequest[]   @relation("AdminOverrideReviews")
  adminMessages      AdminMessage[]      @relation("AdminMessages")
  receivedMessages   AdminMessage[]      @relation("ReceivedMessages")
}

model Property {
  id            String     @id @default(cuid())
  name          String
  address       String?
  county        String
  state         String
  numberOfUnits Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  ownerId       String
  owner         User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rentRolls     RentRoll[]
  units         Unit[]
  overrideRequests OverrideRequest[]
}

model Unit {
  id            String   @id @default(cuid())
  unitNumber    String
  squareFootage Int?
  bedroomCount  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  leases        Lease[]
  overrideRequests OverrideRequest[]

  @@index([propertyId])
  @@index([unitNumber])
}

model RentRoll {
  id         String    @id @default(cuid())
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenancies  Tenancy[]

  @@unique([propertyId, date])
}

model Lease {
  id                  String               @id @default(cuid())
  name                String
  leaseStartDate      DateTime?
  leaseEndDate        DateTime?
  leaseRent           Decimal?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  unitId              String
  unit                Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  tenancy             Tenancy?
  incomeVerifications IncomeVerification[]
  residents           Resident[]

  @@index([unitId])
}

model Tenancy {
  id         String   @id @default(cuid())
  rentRollId String
  rentRoll   RentRoll @relation(fields: [rentRollId], references: [id], onDelete: Cascade)
  leaseId    String   @unique
  lease      Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([leaseId, rentRollId])
  @@index([rentRollId])
}

model Resident {
  id                        String    @id @default(cuid())
  name                      String
  annualizedIncome          Decimal?  @db.Decimal(10, 2)
  verifiedIncome            Decimal?  @db.Decimal(10, 2)
  
  // New resident-level income calculation fields
  calculatedAnnualizedIncome Decimal?  @db.Decimal(10, 2)
  incomeFinalized           Boolean   @default(false)
  finalizedAt               DateTime?
  
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  // Relationships
  lease                     Lease     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId                   String
  incomeDocuments           IncomeDocument[]
  overrideRequests          OverrideRequest[]

  @@index([leaseId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model IncomeVerification {
  id                         String             @id @default(cuid())
  status                     VerificationStatus @default(IN_PROGRESS)
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  finalizedAt                DateTime?
  calculatedVerifiedIncome   Decimal?           @db.Decimal(10, 2)

  // Lease association  
  lease                      Lease              @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId                    String

  // Verification period
  verificationPeriodStart    DateTime?
  verificationPeriodEnd      DateTime?
  
  // Associated lease period (what lease period this verification covers)
  associatedLeaseStart       DateTime?
  associatedLeaseEnd         DateTime?
  
  // Due date and metadata
  dueDate                    DateTime?
  leaseYear                  Int?
  reason                     VerificationReason?
  reminderSentAt            DateTime?

  // Related documents
  incomeDocuments            IncomeDocument[]
  overrideRequests          OverrideRequest[]

  @@index([leaseId])
  @@index([status])
}

model IncomeDocument {
  id                        String         @id @default(cuid())
  documentType              DocumentType
  documentDate              DateTime
  uploadDate                DateTime       @default(now())
  status                    DocumentStatus @default(PROCESSING)
  filePath                  String

  // W2 fields
  box1_wages                Decimal?       @db.Decimal(10, 2)
  box3_ss_wages            Decimal?       @db.Decimal(10, 2)
  box5_med_wages           Decimal?       @db.Decimal(10, 2)
  employeeName             String?
  employerName             String?
  taxYear                  Int?

  // Paystub fields
  calculatedAnnualizedIncome Decimal?     @db.Decimal(10, 2)
  payPeriodStartDate        DateTime?
  payPeriodEndDate          DateTime?
  grossPayAmount            Decimal?     @db.Decimal(10, 2)
  payFrequency              String?

  // Relationships
  verification              IncomeVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
  verificationId            String
  resident                  Resident     @relation(fields: [residentId], references: [id], onDelete: Cascade)
  residentId                String
  overrideRequests         OverrideRequest[]

  @@index([verificationId])
  @@index([residentId])
  @@index([status])
}

enum DocumentType {
  W2
  PAYSTUB
  BANK_STATEMENT
  OFFER_LETTER
  SOCIAL_SECURITY
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  NEEDS_REVIEW
}

enum VerificationStatus {
  IN_PROGRESS
  FINALIZED
  OVERDUE
}

enum VerificationReason {
  INITIAL_LEASE
  ANNUAL_RECERTIFICATION
  LEASE_RENEWAL
  INCOME_CHANGE
  COMPLIANCE_AUDIT
}

enum UserRole {
  USER
  ADMIN
}

enum OverrideRequestType {
  VALIDATION_EXCEPTION    // Need fewer docs than required
  INCOME_DISCREPANCY     // Use verified vs compliance income
  DOCUMENT_REVIEW        // Manual entry for failed OCR
  PROPERTY_DELETION      // Request to delete entire property
}

enum OverrideRequestStatus {
  PENDING
  APPROVED  
  DENIED
  APPLIED
}

model OverrideRequest {
  id                String                 @id @default(cuid())
  type              OverrideRequestType
  status            OverrideRequestStatus  @default(PENDING)
  userExplanation   String?
  adminNotes        String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  reviewedAt        DateTime?
  
  // References
  propertyId        String?
  property          Property?              @relation(fields: [propertyId], references: [id])
  unitId            String?
  unit              Unit?                  @relation(fields: [unitId], references: [id])
  residentId        String?
  resident          Resident?              @relation(fields: [residentId], references: [id])
  verificationId    String?
  verification      IncomeVerification?    @relation(fields: [verificationId], references: [id])
  documentId        String?
  document          IncomeDocument?        @relation(fields: [documentId], references: [id])
  
  requesterId       String
  requester         User                   @relation("UserOverrideRequests", fields: [requesterId], references: [id])
  reviewerId        String?
  reviewer          User?                  @relation("AdminOverrideReviews", fields: [reviewerId], references: [id])
  
  // Admin messages
  adminMessages     AdminMessage[]
}

model AdminMessage {
  id                String                 @id @default(cuid())
  subject           String
  message           String
  sentAt            DateTime               @default(now())
  
  // References
  overrideRequestId String
  overrideRequest   OverrideRequest        @relation(fields: [overrideRequestId], references: [id], onDelete: Cascade)
  adminId           String
  admin             User                   @relation("AdminMessages", fields: [adminId], references: [id])
  recipientId       String
  recipient         User                   @relation("ReceivedMessages", fields: [recipientId], references: [id])
}
